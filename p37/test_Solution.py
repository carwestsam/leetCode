from unittest import TestCase
from copy import copy
from p37.Solution import Solution

solution1 = [
    ['5', '3', '4', '6', '7', '8', '9', '1', '2'],
    ['6', '7', '2', '1', '9', '5', '3', '4', '8'],
    ['1', '9', '8', '3', '4', '2', '5', '6', '7'],
    ['8', '5', '9', '7', '6', '1', '4', '2', '3'],
    ['4', '2', '6', '8', '5', '3', '7', '9', '1'],
    ['7', '1', '3', '9', '2', '4', '8', '5', '6'],
    ['9', '6', '1', '5', '3', '7', '2', '8', '4'],
    ['2', '8', '7', '4', '1', '9', '6', '3', '5'],
    ['3', '4', '5', '2', '8', '6', '1', '7', '9']
]


class TestSolution(TestCase):
    def test_two_availabe(self):
        sol = Solution()
        board = copy(solution1)
        board[1][1] = '.'
        avBoard = [[1 << 10 - 2] * 9 for _ in range(9)]
        sol.initBoard(board, avBoard)
        x, y, v = sol.findUniqueOnBoard(board, avBoard)
        self.assertEqual(x, 1)
        self.assertEqual(y, 1)
        self.assertEqual(v, 7)

    def test_s(self):
        sol = Solution()
        board = [['5', '3', '.', '.', '7', '.', '.', '.', '.'], ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                 ['.', '9', '8', '.', '.', '.', '.', '6', '.'], ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
                 ['4', '.', '.', '8', '.', '3', '.', '.', '1'], ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
                 ['.', '6', '.', '.', '.', '.', '2', '8', '.'], ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
                 ['.', '.', '.', '.', '8', '.', '.', '7', '9']]
        sol.solveSudoku(board)
